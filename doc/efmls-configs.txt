INTRODUCTION                                    *efmls-configs* *efmls*

An unofficial collection of linters and formatters configured for
efm-langserver to work with the builtin nvim-lsp.

Check out |efmls-configs-supported| for a list of supported languages.

SETUP                                            *efmls-configs-setup*

You need to first initialize the plugin with the init(), this is
where you pass your LSP options like on_attach, capabilities, etc.

>
    local function on_attach(client)
      print('Attached to ' .. client.name)
    end

    local efmls = require 'efmls-configs'
    efmls.init {
      -- Your custom attach function
      on_attach = on_attach,

      -- You may also want to enable document formatting
      -- to enable formatting via LSP
      init_options = {
        documentFormatting = true,
      },
    }
<

Finally, register the linters and formatters you want to run on
the specific filetypes with the setup() function. Below is an
example to setup eslint and prettier to work with a javascript
filetype.

>
    local eslint = require 'efmls-configs.linters.eslint'
    local pretter = require 'efmls-configs.formatters.prettier'
    efmls.setup {
      javascript = {
        linter = eslint,
        formatter = prettier,
      },
    }
<

DEFAULT CONFIGURATIONS                          *efmls-configs-defaults*

A default configuration for the supported filetypes is provided but not
activated by default.

To activate the default configuration you can pass the default_config flag
as true in the init function. Below are the default values for init:

>
    efmls.init {
      -- Use a list of default configurations
      -- set by this plugin
      -- (Default: false)
      default_config = false,
    }

    efmls.setup()
<

You will still need to call the `setup()` after `init()` for the
changes to take effect. You can still pass your custom configurations
to `setup()` as show in the |efmls-configs-setup| section and it will
override any default configuration set by `default_config` if it's the
same filetype.

ADVANCED SETUP                                 *efmls-configs-advanced*

If you want to change some settings that are not provided in the
default config, you can change them with vim.tbl_extend. These configs
take the same keys referenced in the schema file (|efmls-configs-schema|)

>
    local eslint = require 'efmls-configs.linters.eslint'
    eslint = vim.tbl_extend('force', eslint, {
      prefix = 'new eslint prefix',
      lintCommand = 'eslint --format visualstudio --stdin',
    })

    efmls.setup {
      javascript = { linter = eslint },
    }
<

TROUBLESHOOTING                                 *efmls-configs-issues*

If you get "no executable found" issues in `:checkhealth`,
this means that the linter or formatter was not found in the provided
filepath. Ensure that it is installed globally or in a valid filepath.

For nodejs/npm, php/composer, ruby/bundler: check if the linter or
formatter is installed in your node_modules (npm), vendor
(composer/bundler) project folder, or installed globally.

EFM-LANGSERVER SCHEMA FILE                       *efmls-configs-schema*

https://github.com/mattn/efm-langserver/blob/master/schema.json

SUPPORTED LINTERS AND FORMATTERS               *efmls-configs-supported*

https://github.com/creativenull/efmls-configs-nvim#language-support-todo

 vim:tw=78:ts=8:noet:ft=help:norl:
